//
//	CCollision.cpp
//		Author:	DATE:
//===============================================
//	変更者 Changed By
//		Name:	DATE:
//
//-----------------------------------------------

//===============================================
//	インクルード	include
//===============================================
#include"common.h"
#include"CCollision.h"
//class

//===============================================
//	マクロ定義		define
//===============================================


//===============================================
//	グローバル変数	global
//===============================================


namespace Collision
{
	//===============================================
	//	ACollision
	//===============================================

	//-------------------------------------
	//	コンストラクタ
	//-------------------------------------
	ACollision::ACollision()
	{
	
	}

	//-------------------------------------
	//	デストラクタ
	//-------------------------------------
	ACollision::~ACollision()
	{
	
	}

	//===============================================
	//	Sphere
	//===============================================

	//-------------------------------------
	//	コンストラクタ
	//-------------------------------------
	Sphere::Sphere(D3DXVECTOR3* pCenter, float radius)
	{
		this->pCenter = pCenter;
		this->radius = radius;
	}

	//-------------------------------------
	//	デストラクタ
	//-------------------------------------
	Sphere::~Sphere()
	{
		this->pCenter = NULL;
	}

	//==============================================
	//	関数
	//==============================================
	bool Judge(Sphere* col_1, Sphere* col_2)
	{
		D3DXVECTOR3 vec = *col_1->pCenter - *col_2->pCenter;
		float length = (vec.x*vec.x) + (vec.y*vec.y) + (vec.z * vec.z);

		//距離が半径の合計より長い
		if (length > (col_1->radius + col_2->radius) * (col_1->radius + col_2->radius)) return false;

		return true;
	}
}